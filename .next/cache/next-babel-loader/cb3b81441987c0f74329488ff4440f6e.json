{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar graphql_middleware = function graphql_middleware(url) {\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        if (typeof action.payload === 'object' && action.payload.query) {\n          // allow call normal action\n          next(action);\n          var headers = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json' // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\n\n          };\n          fetch(\"\".concat(url, \"/graphql\"), {\n            method: 'POST',\n            headers: headers,\n            body: _JSON$stringify({\n              query: action.payload.query,\n              variables: {\n                devteam: process.env.NODE_ENV === 'development'\n              }\n            })\n          }).then(function (r) {\n            return r.json();\n          }).then(function (data) {\n            var result = data.data;\n\n            for (var key in result) {\n              if (result.hasOwnProperty(key)) {\n                if (result[key].success === false) {\n                  alert(result[key].messages);\n                  store.dispatch({\n                    type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'FAIL'].join('_'),\n                    messages: result[key].messages,\n                    old_action: action\n                  });\n                } else store.dispatch({\n                  type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'SUCCESS'].join('_'),\n                  messages: result[key].messages,\n                  data: result[key],\n                  old_action: action\n                });\n              }\n            }\n          })[\"catch\"](function (error) {\n            console.error(error);\n            store.dispatch({\n              type: action.type + '_FAIL',\n              old_action: action\n            });\n          });\n        } else {\n          next(action);\n        }\n      };\n    };\n  };\n};\n\nexport default graphql_middleware;","map":{"version":3,"sources":["/home/pilot/JS/with-redux-thunk-app/middlewares/graphql-middleware.js"],"names":["graphql_middleware","url","store","next","action","payload","query","headers","Accept","fetch","method","body","variables","devteam","process","env","NODE_ENV","then","r","json","data","result","key","hasOwnProperty","success","alert","messages","dispatch","type","split","join","toUpperCase","old_action","error","console"],"mappings":";;AAAA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,GAAG,EAAI;AAChC,SAAO,UAAAC,KAAK,EAAI;AACd,WAAO,UAAAC,IAAI,EAAI;AACb,aAAO,UAAAC,MAAM,EAAI;AACf,YAAI,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA1B,IAAsCD,MAAM,CAACC,OAAP,CAAeC,KAAzD,EAAgE;AAC9D;AACAH,UAAAA,IAAI,CAACC,MAAD,CAAJ;AAEA,cAAIG,OAAO,GAAG;AACZ,4BAAgB,kBADJ;AAEZC,YAAAA,MAAM,EAAE,kBAFI,CAKd;;AALc,WAAd;AAOAC,UAAAA,KAAK,WAAIR,GAAJ,eAAmB;AACtBS,YAAAA,MAAM,EAAE,MADc;AAEtBH,YAAAA,OAAO,EAAPA,OAFsB;AAGtBI,YAAAA,IAAI,EAAE,gBAAe;AACnBL,cAAAA,KAAK,EAAEF,MAAM,CAACC,OAAP,CAAeC,KADH;AAEnBM,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAApC;AAFQ,aAAf;AAHgB,WAAnB,CAAL,CAQGC,IARH,CAQQ,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,WART,EASGF,IATH,CASQ,UAAAG,IAAI,EAAI;AACZ,gBAAMC,MAAM,GAAGD,IAAI,CAACA,IAApB;;AACA,iBAAK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,kBAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC9B,oBAAID,MAAM,CAACC,GAAD,CAAN,CAAYE,OAAZ,KAAwB,KAA5B,EAAmC;AACjCC,kBAAAA,KAAK,CAACJ,MAAM,CAACC,GAAD,CAAN,CAAYI,QAAb,CAAL;AACAxB,kBAAAA,KAAK,CAACyB,QAAN,CAAe;AACbC,oBAAAA,IAAI,EAAE,CACJxB,MAAM,CAACwB,IADH,EAEJN,GAAG,CACAO,KADH,CACS,WADT,EAEGC,IAFH,CAEQ,GAFR,EAGGC,WAHH,EAFI,EAMJ,MANI,EAOJD,IAPI,CAOC,GAPD,CADO;AASbJ,oBAAAA,QAAQ,EAAEL,MAAM,CAACC,GAAD,CAAN,CAAYI,QATT;AAUbM,oBAAAA,UAAU,EAAE5B;AAVC,mBAAf;AAYD,iBAdD,MAeEF,KAAK,CAACyB,QAAN,CAAe;AACbC,kBAAAA,IAAI,EAAE,CACJxB,MAAM,CAACwB,IADH,EAEJN,GAAG,CACAO,KADH,CACS,WADT,EAEGC,IAFH,CAEQ,GAFR,EAGGC,WAHH,EAFI,EAMJ,SANI,EAOJD,IAPI,CAOC,GAPD,CADO;AASbJ,kBAAAA,QAAQ,EAAEL,MAAM,CAACC,GAAD,CAAN,CAAYI,QATT;AAUbN,kBAAAA,IAAI,EAAEC,MAAM,CAACC,GAAD,CAVC;AAWbU,kBAAAA,UAAU,EAAE5B;AAXC,iBAAf;AAaH;AACF;AACF,WA3CH,WA4CS,UAAA6B,KAAK,EAAI;AACdC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAEA/B,YAAAA,KAAK,CAACyB,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAExB,MAAM,CAACwB,IAAP,GAAc,OADP;AAEbI,cAAAA,UAAU,EAAE5B;AAFC,aAAf;AAID,WAnDH;AAoDD,SA/DD,MA+DO;AACLD,UAAAA,IAAI,CAACC,MAAD,CAAJ;AACD;AACF,OAnED;AAoED,KArED;AAsED,GAvED;AAwED,CAzED;;AA2EA,eAAeJ,kBAAf","sourcesContent":["const graphql_middleware = url => {\n  return store => {\n    return next => {\n      return action => {\n        if (typeof action.payload === 'object' && action.payload.query) {\n          // allow call normal action\n          next(action)\n\n          let headers = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n          }\n\n          // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\n\n          fetch(`${url}/graphql`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n              query: action.payload.query,\n              variables: { devteam: process.env.NODE_ENV === 'development' }\n            })\n          })\n            .then(r => r.json())\n            .then(data => {\n              const result = data.data\n              for (var key in result) {\n                if (result.hasOwnProperty(key)) {\n                  if (result[key].success === false) {\n                    alert(result[key].messages)\n                    store.dispatch({\n                      type: [\n                        action.type,\n                        key\n                          .split(/(?=[A-Z])/)\n                          .join('_')\n                          .toUpperCase(),\n                        'FAIL'\n                      ].join('_'),\n                      messages: result[key].messages,\n                      old_action: action\n                    })\n                  } else\n                    store.dispatch({\n                      type: [\n                        action.type,\n                        key\n                          .split(/(?=[A-Z])/)\n                          .join('_')\n                          .toUpperCase(),\n                        'SUCCESS'\n                      ].join('_'),\n                      messages: result[key].messages,\n                      data: result[key],\n                      old_action: action\n                    })\n                }\n              }\n            })\n            .catch(error => {\n              console.error(error)\n\n              store.dispatch({\n                type: action.type + '_FAIL',\n                old_action: action\n              })\n            })\n        } else {\n          next(action)\n        }\n      }\n    }\n  }\n}\n\nexport default graphql_middleware\n"]},"metadata":{},"sourceType":"module"}