{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\n\nvar graphql_middleware = function graphql_middleware(url) {\n  return function (store) {\n    return function (next) {\n      return (\n        /*#__PURE__*/\n        function () {\n          var _ref = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee2(action) {\n            var headers;\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!(typeof action.payload === 'object' && action.payload.query)) {\n                      _context2.next = 7;\n                      break;\n                    }\n\n                    // allow call normal action\n                    next(action);\n                    headers = {\n                      'Content-Type': 'application/json',\n                      Accept: 'application/json' // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\n\n                    };\n                    _context2.next = 5;\n                    return fetch(\"\".concat(url, \"/graphql\"), {\n                      method: 'POST',\n                      headers: headers,\n                      body: _JSON$stringify({\n                        query: action.payload.query,\n                        variables: {\n                          devteam: process.env.NODE_ENV === 'development'\n                        }\n                      })\n                    }).then(function (r) {\n                      return r.json();\n                    }).then(\n                    /*#__PURE__*/\n                    function () {\n                      var _ref2 = _asyncToGenerator(\n                      /*#__PURE__*/\n                      _regeneratorRuntime.mark(function _callee(data) {\n                        var result, key;\n                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                result = data.data;\n                                _context.t0 = _regeneratorRuntime.keys(result);\n\n                              case 2:\n                                if ((_context.t1 = _context.t0()).done) {\n                                  _context.next = 14;\n                                  break;\n                                }\n\n                                key = _context.t1.value;\n\n                                if (!result.hasOwnProperty(key)) {\n                                  _context.next = 12;\n                                  break;\n                                }\n\n                                if (!(result[key].success === false)) {\n                                  _context.next = 11;\n                                  break;\n                                }\n\n                                alert(result[key].messages);\n                                _context.next = 9;\n                                return store.dispatch({\n                                  type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'FAIL'].join('_'),\n                                  messages: result[key].messages,\n                                  old_action: action\n                                });\n\n                              case 9:\n                                _context.next = 12;\n                                break;\n\n                              case 11:\n                                store.dispatch({\n                                  type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'SUCCESS'].join('_'),\n                                  messages: result[key].messages,\n                                  data: result[key],\n                                  old_action: action\n                                });\n\n                              case 12:\n                                _context.next = 2;\n                                break;\n\n                              case 14:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                      return function (_x2) {\n                        return _ref2.apply(this, arguments);\n                      };\n                    }())[\"catch\"](function (error) {\n                      console.error(error);\n                      store.dispatch({\n                        type: action.type + '_FAIL',\n                        old_action: action\n                      });\n                    });\n\n                  case 5:\n                    _context2.next = 8;\n                    break;\n\n                  case 7:\n                    next(action);\n\n                  case 8:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()\n      );\n    };\n  };\n};\n\nexport default graphql_middleware;","map":{"version":3,"sources":["d:\\OJT\\nextjs-redux\\middlewares\\graphql-middleware.js"],"names":["fetch","graphql_middleware","url","store","next","action","payload","query","headers","Accept","method","body","variables","devteam","process","env","NODE_ENV","then","r","json","data","result","key","hasOwnProperty","success","alert","messages","dispatch","type","split","join","toUpperCase","old_action","error","console"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\nconst graphql_middleware = url => {\r\n  return store => {\r\n    return next => {\r\n      return async action => {\r\n        if (typeof action.payload === 'object' && action.payload.query) {\r\n          // allow call normal action\r\n          next(action)\r\n\r\n          let headers = {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json'\r\n          }\r\n\r\n          // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\r\n          await fetch(`${url}/graphql`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify({\r\n              query: action.payload.query,\r\n              variables: { devteam: process.env.NODE_ENV === 'development' }\r\n            })\r\n          })\r\n            .then(r => {\r\n              return r.json()\r\n            })\r\n            .then(async data => {\r\n              const result = data.data\r\n              for (var key in result) {\r\n                if (result.hasOwnProperty(key)) {\r\n                  if (result[key].success === false) {\r\n                    alert(result[key].messages)\r\n                    await store.dispatch({\r\n                      type: [\r\n                        action.type,\r\n                        key\r\n                          .split(/(?=[A-Z])/)\r\n                          .join('_')\r\n                          .toUpperCase(),\r\n                        'FAIL'\r\n                      ].join('_'),\r\n                      messages: result[key].messages,\r\n                      old_action: action\r\n                    })\r\n                  } else {\r\n                    store.dispatch({\r\n                      type: [\r\n                        action.type,\r\n                        key\r\n                          .split(/(?=[A-Z])/)\r\n                          .join('_')\r\n                          .toUpperCase(),\r\n                        'SUCCESS'\r\n                      ].join('_'),\r\n                      messages: result[key].messages,\r\n                      data: result[key],\r\n                      old_action: action\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n            })\r\n            .catch(error => {\r\n              console.error(error)\r\n\r\n              store.dispatch({\r\n                type: action.type + '_FAIL',\r\n                old_action: action\r\n              })\r\n            })\r\n        } else {\r\n          next(action)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default graphql_middleware\r\n"]},"metadata":{},"sourceType":"module"}