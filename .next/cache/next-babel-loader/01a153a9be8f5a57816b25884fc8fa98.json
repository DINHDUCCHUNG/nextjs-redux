{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-unfetch';\n\nconst graphql_middleware = url => {\n  return store => {\n    return next => {\n      return async action => {\n        if (typeof action.payload === 'object' && action.payload.query) {\n          // allow call normal action\n          next(action);\n          let headers = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json' // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\n\n          };\n          await fetch(`${url}/graphql`, {\n            method: 'POST',\n            headers,\n            body: _JSON$stringify({\n              query: action.payload.query,\n              variables: {\n                devteam: process.env.NODE_ENV === 'development'\n              }\n            })\n          }).then(r => {\n            return r.json();\n          }).then(async data => {\n            const result = data.data;\n\n            for (var key in result) {\n              if (result.hasOwnProperty(key)) {\n                if (result[key].success === false) {\n                  alert(result[key].messages);\n                  await store.dispatch({\n                    type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'FAIL'].join('_'),\n                    messages: result[key].messages,\n                    old_action: action\n                  });\n                } else {\n                  store.dispatch({\n                    type: [action.type, key.split(/(?=[A-Z])/).join('_').toUpperCase(), 'SUCCESS'].join('_'),\n                    messages: result[key].messages,\n                    data: result[key],\n                    old_action: action\n                  });\n                }\n              }\n            }\n          }).catch(error => {\n            console.error(error);\n            store.dispatch({\n              type: action.type + '_FAIL',\n              old_action: action\n            });\n          });\n        } else {\n          next(action);\n        }\n      };\n    };\n  };\n};\n\nexport default graphql_middleware;","map":{"version":3,"sources":["d:\\OJT\\nextjs-redux\\middlewares\\graphql-middleware.js"],"names":["fetch","graphql_middleware","url","store","next","action","payload","query","headers","Accept","method","body","variables","devteam","process","env","NODE_ENV","then","r","json","data","result","key","hasOwnProperty","success","alert","messages","dispatch","type","split","join","toUpperCase","old_action","catch","error","console"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,kBAAkB,GAAGC,GAAG,IAAI;AAChC,SAAOC,KAAK,IAAI;AACd,WAAOC,IAAI,IAAI;AACb,aAAO,MAAMC,MAAN,IAAgB;AACrB,YAAI,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA1B,IAAsCD,MAAM,CAACC,OAAP,CAAeC,KAAzD,EAAgE;AAC9D;AACAH,UAAAA,IAAI,CAACC,MAAD,CAAJ;AAEA,cAAIG,OAAO,GAAG;AACZ,4BAAgB,kBADJ;AAEZC,YAAAA,MAAM,EAAE,kBAFI,CAKd;;AALc,WAAd;AAMA,gBAAMT,KAAK,CAAE,GAAEE,GAAI,UAAR,EAAmB;AAC5BQ,YAAAA,MAAM,EAAE,MADoB;AAE5BF,YAAAA,OAF4B;AAG5BG,YAAAA,IAAI,EAAE,gBAAe;AACnBJ,cAAAA,KAAK,EAAEF,MAAM,CAACC,OAAP,CAAeC,KADH;AAEnBK,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAApC;AAFQ,aAAf;AAHsB,WAAnB,CAAL,CAQHC,IARG,CAQEC,CAAC,IAAI;AACT,mBAAOA,CAAC,CAACC,IAAF,EAAP;AACD,WAVG,EAWHF,IAXG,CAWE,MAAMG,IAAN,IAAc;AAClB,kBAAMC,MAAM,GAAGD,IAAI,CAACA,IAApB;;AACA,iBAAK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,kBAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC9B,oBAAID,MAAM,CAACC,GAAD,CAAN,CAAYE,OAAZ,KAAwB,KAA5B,EAAmC;AACjCC,kBAAAA,KAAK,CAACJ,MAAM,CAACC,GAAD,CAAN,CAAYI,QAAb,CAAL;AACA,wBAAMvB,KAAK,CAACwB,QAAN,CAAe;AACnBC,oBAAAA,IAAI,EAAE,CACJvB,MAAM,CAACuB,IADH,EAEJN,GAAG,CACAO,KADH,CACS,WADT,EAEGC,IAFH,CAEQ,GAFR,EAGGC,WAHH,EAFI,EAMJ,MANI,EAOJD,IAPI,CAOC,GAPD,CADa;AASnBJ,oBAAAA,QAAQ,EAAEL,MAAM,CAACC,GAAD,CAAN,CAAYI,QATH;AAUnBM,oBAAAA,UAAU,EAAE3B;AAVO,mBAAf,CAAN;AAYD,iBAdD,MAcO;AACLF,kBAAAA,KAAK,CAACwB,QAAN,CAAe;AACbC,oBAAAA,IAAI,EAAE,CACJvB,MAAM,CAACuB,IADH,EAEJN,GAAG,CACAO,KADH,CACS,WADT,EAEGC,IAFH,CAEQ,GAFR,EAGGC,WAHH,EAFI,EAMJ,SANI,EAOJD,IAPI,CAOC,GAPD,CADO;AASbJ,oBAAAA,QAAQ,EAAEL,MAAM,CAACC,GAAD,CAAN,CAAYI,QATT;AAUbN,oBAAAA,IAAI,EAAEC,MAAM,CAACC,GAAD,CAVC;AAWbU,oBAAAA,UAAU,EAAE3B;AAXC,mBAAf;AAaD;AACF;AACF;AACF,WA9CG,EA+CH4B,KA/CG,CA+CGC,KAAK,IAAI;AACdC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAEA/B,YAAAA,KAAK,CAACwB,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAEvB,MAAM,CAACuB,IAAP,GAAc,OADP;AAEbI,cAAAA,UAAU,EAAE3B;AAFC,aAAf;AAID,WAtDG,CAAN;AAuDD,SAjED,MAiEO;AACLD,UAAAA,IAAI,CAACC,MAAD,CAAJ;AACD;AACF,OArED;AAsED,KAvED;AAwED,GAzED;AA0ED,CA3ED;;AA6EA,eAAeJ,kBAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\nconst graphql_middleware = url => {\r\n  return store => {\r\n    return next => {\r\n      return async action => {\r\n        if (typeof action.payload === 'object' && action.payload.query) {\r\n          // allow call normal action\r\n          next(action)\r\n\r\n          let headers = {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json'\r\n          }\r\n\r\n          // if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\r\n          await fetch(`${url}/graphql`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify({\r\n              query: action.payload.query,\r\n              variables: { devteam: process.env.NODE_ENV === 'development' }\r\n            })\r\n          })\r\n            .then(r => {\r\n              return r.json()\r\n            })\r\n            .then(async data => {\r\n              const result = data.data\r\n              for (var key in result) {\r\n                if (result.hasOwnProperty(key)) {\r\n                  if (result[key].success === false) {\r\n                    alert(result[key].messages)\r\n                    await store.dispatch({\r\n                      type: [\r\n                        action.type,\r\n                        key\r\n                          .split(/(?=[A-Z])/)\r\n                          .join('_')\r\n                          .toUpperCase(),\r\n                        'FAIL'\r\n                      ].join('_'),\r\n                      messages: result[key].messages,\r\n                      old_action: action\r\n                    })\r\n                  } else {\r\n                    store.dispatch({\r\n                      type: [\r\n                        action.type,\r\n                        key\r\n                          .split(/(?=[A-Z])/)\r\n                          .join('_')\r\n                          .toUpperCase(),\r\n                        'SUCCESS'\r\n                      ].join('_'),\r\n                      messages: result[key].messages,\r\n                      data: result[key],\r\n                      old_action: action\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n            })\r\n            .catch(error => {\r\n              console.error(error)\r\n\r\n              store.dispatch({\r\n                type: action.type + '_FAIL',\r\n                old_action: action\r\n              })\r\n            })\r\n        } else {\r\n          next(action)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default graphql_middleware\r\n"]},"metadata":{},"sourceType":"module"}