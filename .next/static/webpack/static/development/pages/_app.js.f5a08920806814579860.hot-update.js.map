{"version":3,"file":"static/webpack/static/development/pages/_app.js.f5a08920806814579860.hot-update.js","sources":["webpack:///./middlewares/graphql-middleware.js"],"sourcesContent":["const graphql_middleware = url => {\n  return store => {\n    return next => {\n      return action => {\n        if (typeof action.payload === 'object' && action.payload.query) {\n          // allow call normal action\n          next(action)\n\n          let headers = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n          }\n\n          if (localStorage.getItem('token')) headers['token'] = localStorage.getItem('token')\n\n          fetch(`${url}/graphql`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n              query: action.payload.query,\n              variables: { devteam: process.env.NODE_ENV === 'development' }\n            })\n          })\n            .then(r => r.json())\n            .then(data => {\n              const result = data.data\n              for (var key in result) {\n                if (result.hasOwnProperty(key)) {\n                  if (result[key].success === false) {\n                    alert(result[key].messages)\n                    store.dispatch({\n                      type: [\n                        action.type,\n                        key\n                          .split(/(?=[A-Z])/)\n                          .join('_')\n                          .toUpperCase(),\n                        'FAIL'\n                      ].join('_'),\n                      messages: result[key].messages,\n                      old_action: action\n                    })\n                  } else\n                    store.dispatch({\n                      type: [\n                        action.type,\n                        key\n                          .split(/(?=[A-Z])/)\n                          .join('_')\n                          .toUpperCase(),\n                        'SUCCESS'\n                      ].join('_'),\n                      messages: result[key].messages,\n                      data: result[key],\n                      old_action: action\n                    })\n                }\n              }\n            })\n            .catch(error => {\n              console.error(error)\n\n              store.dispatch({\n                type: action.type + '_FAIL',\n                old_action: action\n              })\n            })\n        } else {\n          next(action)\n        }\n      }\n    }\n  }\n}\n\nexport default graphql_middleware\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAHA;AAQA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAVA;AAYA;AAEA;AAQA;AACA;AACA;AAXA;AAaA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}